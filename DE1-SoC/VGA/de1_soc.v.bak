
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);




//=======================================================
//  Structural coding
//=======================================================
	reg[9:0] H_Cont; //行扫描计数器
    reg[9:0] V_Cont; //列扫描计数器
    reg[7:0] vga_r;
    reg[7:0] vga_g;
    reg[7:0] vga_b;
    reg vga_hs;
    reg vga_vs;
    reg[10:0] X;
    reg[10:0] Y;
    assign VGA_R  = vga_r;
    assign VGA_G  = vga_g;
    assign VGA_B  = vga_b;
    assign VGA_HS = vga_hs;
    assign VGA_VS = vga_vs;
    //Horizontal Parameter
    parameter H_FRONT = 16;
    parameter H_SYNC  = 96;
    parameter H_BACK  = 48;
    parameter H_ACT   = 640;
    parameter H_BLANK = H_FRONT+H_SYNC+H_BACK;
    parameter H_TOTAL = H_FRONT+H_SYNC+H_BACK+H_ACT;
    //Vertical Parameter
    parameter V_FRONT = 11;
    parameter V_SYNC  = 2;
    parameter V_BACK  = 32;
    parameter V_ACT   = 480;
    parameter V_BLANK = V_FRONT+V_SYNC+V_BACK;
    parameter V_TOTAL = V_FRONT+V_SYNC+V_BACK+V_ACT;
    wire CLK_25;
    wire RST_N;
    wire clk;
    // Generator DAC_CLOCK 25MHz
    pll pll_inst (.inclk0 (CLOCK_50), .c0 (CLK_25));

//=======================================================
//  REG/WIRE declarations
//=======================================================


    //Select DAC CLOCK
    assign VGA_CLK    = CLK_25;
    assign VGA_SYNC_N = 1'b0;
    //If not SOG, Sync input should be tied to 0;
    assign VGA_BLANK_N = ~((H_Cont<H_BLANK)||(V_Cont<V_BLANK));
    assign RST_N       = KEY[0]; //Horizontal Generator:Refer to the pixel clock
    always@(posedge CLK_25, negedge RST_N)
    begin
        if (!RST_N)
        begin
            H_Cont <= 0;
            vga_hs <= 1;
            X      <= 0;
        end
        else
        begin
            if (H_Cont<H_TOTAL)
                H_Cont <= H_Cont+1'b1;
            else
                H_Cont <= 0;
                //horizontal Sync
            if (H_Cont == H_FRONT-1) //Front porch end
                vga_hs <= 1'b0;
            if (H_Cont == H_FRONT+H_SYNC-1)
                vga_hs <= 1'b1; //Current X
            if (H_Cont> = H_BLANK)
                X<= H_Cont-H_BLANK;
            else
                X<= 0;
        end
    end //vertical Generator: Refer to the horizontal sync
                        
    always@(posedge VGA_HS, negedge RST_N)
      begin
       if (!RST_N)
       begin
        V_Cont <= 0; 
        vga_vs <= 1;
        Y <= 0;
         end    
        else 
        begin 
        if (V_Cont<V_TOTAL)
        V_Cont <= V_Cont+1'b1;   
            else 
            V_Cont                           <= 0; //Vertical Sync
        if (V_Cont == V_FRONT-1) 
        vga_vs<= 1'b0;
        if (V_Cont == V_FRONT+V_SYNC-1) 
        vga_vs<= 1'b1;//Current Y
            if (V_Cont> = V_BLANK) 
            Y<= V_Cont-V_BLANK;
            else 
                    Y <= 0; 
        end 
    end //Pattern Generator

    always@(posedge CLK_25, negedge RST_N)
    begin 
        if (!RST_N)
        begin
         vga_r <= 0; 
         vga_g <= 0; 
         vga_b <= 0; 
         end
        else 
        begin 
            vga_r <= (Y < 120) ? 256 : (Y >= 120 && Y < 240) ? 512 :
                                    (Y > = 240 && Y < 360) ? 768 : 1023; 
            vga_g <= (X < 80) ? 128 :
                                    (X > = 80 && X < 160) ? 256 : (X > = 160 && X < 240) ? 384 :
                                    (X > = 240 && X < 320) ? 512 : (X > = 320 && X < 400) ? 640 :
                                    (X > = 400 && X < 480) ? 768 :
                                    (X > = 480 && X < 560) ? 896 : 1023; 
            vga_b <= (Y < 60) ? 1023:
                                    (Y > = 60 && Y < 120) ? 896 : (Y > = 120 && Y < 180) ? 768 :
                                    (Y > = 180 && Y < 240) ? 640 :
                                    (Y > = 240 && Y < 300) ? 512 :
                                    (Y > = 300 && Y < 360) ? 384 :
                                    (Y > = 360 && Y < 420) ? 256 :
                                    128; 
        end 
    end 
endmodule
